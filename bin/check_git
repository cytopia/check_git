#!/bin/sh -eu



####################################################################################################
####################################################################################################
###
###  G L O B A L   V A R I A B L E S
###
####################################################################################################
####################################################################################################


################################################################################
# Defined variables
################################################################################

###
### Credits
###
INFO_NAME="check_git"
INFO_AUTHOR="cytopia <cytopia@everythingcli.org>"
INFO_GPGKEY="0x695128A2"
INFO_LICENSE="MIT"
INFO_GITHUB="https://github.com/cytopia/check_git"
INFO_DATE="2016-12-08"
INFO_VERSION="0.5"


###
### Console colors (for logging)
###
# If having a tty (console) use colors
if [ -t 1 ]; then
	CLR_SUCC="\033[0;32m"	# Green
	CLR_WARN="\033[0;33m"	# Yellow
	CLR_CRIT="\033[0;31m"	# Red
	CLR_UNKN="\033[0;35m"	# Magenta
	CLR_INFO="\033[0;34m"	# Blue
	CLR_RST="\033[m"		# Normal
# Dump terminal (e.g.: via cron)
else
	CLR_SUCC=
	CLR_WARN=
	CLR_CRIT=
	CLR_UNKN=
	CLR_INFO=
	CLR_RST=
fi


###
### Nagios exit codes
###
EXIT_SUCC=0
EXIT_WARN=1
EXIT_CRIT=2
EXIT_UNKN=3


###
### Final output and exit code
###
PROGRAM_EXIT_TEXT=""
PROGRAM_EXIT_CODE=0



################################################################################
# Variables populated via command line args
################################################################################

###
### 1/3 Mandatory arguments
###

# @var string Repository path
GIT_REPOSITORY_PATH=


###
### 2/3 Optional output arguments
###

#@boolean Output verbose
OUTPUT_VERBOSE=0
# @boolean Output in nagios form?
OUTPUT_NAGIOS=0
OUTPUT_NAGIOS_NAME=
#@boolean Output into logfile?
OUTPUT_LOGFILE=0
OUTPUT_LOGFILE_NAME=


###
### 3/3 Optional check arguments
###

# @var boolean Check git status?
CHECK_STATUS_WITH_SUB=0
CHECK_STATUS_WITHOUT_SUB=0

# @var boolean Diff against remote?
CHECK_REMOTE_WITH_SUB=0
CHECK_REMOTE_WITHOUT_SUB=0
# @var string Remote name
CHECK_REMOTE_NAME=

# @var boolean Check if on a branch
CHECK_BRANCH_ANY=0
CHECK_BRANCH=0
# @var string Check if on this given branch
CHECK_BRANCH_NAME=

# @var boolean Check if on a tag
CHECK_TAG_ANY=0
CHECK_TAG=0
# @var string Check if on this given tag
CHECK_TAG_NAME=

# @var boolean Check If current commit has valid GPG signature
CHECK_GPG_ANY=0
CHECK_GPG=0
# @var string Check if signed with this keyid's (one or comma separated)
CHECK_GPG_KEYS=




####################################################################################################
####################################################################################################
###
###  G L O B A L   F U N C T I O N S
###
####################################################################################################
####################################################################################################


################################################################################
# Program functions
################################################################################

print_usage() {

	echo "Usage: check_git -d <git dir> [-s|-S] [-r|-R <remote>] [-b] [-B <branch>] [-t] [-T <tag>]] [-g] [-G <hash>[,<hash>]] [-v]"
	echo "OR               -d <git dir> [-n <name>] [-l logfile] [-s|-S] [-r|-R <remote>] [-b] [-B <branch>] [-t] [-T <tag>]] [-g] [-G <hash>[,<hash>]] [-v]"
	echo "OR               -h"
	echo "OR               -V"

	echo
	echo "check_git can validate a git repository by different requirements"
	echo "You can have normal output or nagios (-n) compatible output to"
	echo "integrate this into your monitoring system."
	echo

	echo " Required arguments:"
	echo

	echo "   -d <git dir>       Specify path to git repository."
	echo


	echo " Optional arguments (output):"
	echo

	echo "   -v                 Be more verbose."
	echo
	echo "   -n <name>          Create nagios style check outout."
	echo "                      Removes colors and adds a project name to the first line."
	echo

	echo "   -l <logfile>       Log to file instead of stdout."
	echo "                      This is especially useful if you want to integrate this check via nagios."
	echo "                      You can then add a cronjob which periodically logs to file (as your deploy user)"
	echo "                      and the nagios check simply parses the logfile via 'check_git_log'."
	echo "                      Requires '-n'."
	echo

	echo " Optional arguments (checks):"
	echo

	echo "   -s                 Check if git directory is clean."
	echo "                      This also take any submodules into account."
	echo "                      To prevent checking submodules use '-S'."
	echo "                      '-s' and '-S' are mutually exclusive."
	echo

	echo "   -S                 Check if git directory is clean (ignore submodules)".
	echo "                      This ignores any submodules."
	echo "                      To also check against submodules use '-s'."
	echo "                      '-s' and '-S' are mutually exclusive."
	echo
	echo

	echo "   -r <remote>        Check if git repository is in sync with remote."
	echo "                      This option makes only sense, if your repository is"
	echo "                      checked out on a branch that can be compared with remote."
	echo "                      This also take any submodules into account."
	echo "                      To prevent checking submodules use '-R'."
	echo "                      '-r' and '-R' are mutually exclusive."
	echo

	echo "   -R <remote>        Check if git repository is in sync with remote (ignore submodules)."
	echo "                      This option makes only sense, if your repository is"
	echo "                      checked out on a branch that can be compared with remote."
	echo "                      This ignores any submodules."
	echo "                      To also check submodules use '-r'."
	echo "                      '-r' and '-R' are mutually exclusive."

	echo "   -b                 Check if repository is checkout out on a branch."
	echo "                      No detached HEAD or tag."
	echo "                      '-b', '-B', '-t' and '-T' are mutually exclusive."
	echo

	echo "   -B [<branch>]      Check if repository is checkout out on the specified branch."
	echo "                      '-b', '-B', '-t' and '-T' are mutually exclusive."
	echo

	echo "   -t                 Check if repository is checkout out on a tag."
	echo "                      No detached HEAD or branch."
	echo "                      '-b', '-B', '-t' and '-T' are mutually exclusive."
	echo

	echo "   -T [<tag>]         Check if repository is checkout out on the specified tag."
	echo "                      No detached HEAD or branch."
	echo "                      '-b', '-B', '-t' and '-T' are mutually exclusive."
	echo

	echo "   -g                 Check if current HEAD is signed and has a valid GPG signature."
	echo "                      If current HEAD is a tag, the GPG signature of the tag is checked,"
	echo "                      instead of the signature of the current commit."
	echo "                      For this to pass, you will also have to add your trusted"
	echo "                      GPG public keys locally."
	echo "                      Returns:"
	echo "                          Error, if not signed."
	echo "                          Warning, if signed, but pubkey is not available."
	echo "                          Warning, if signed, but pubkey is not trusted."
	echo "                          OK, if signed, pubkey is available and trusted."
	echo "                      '-g', and '-G' are mutually exclusive."
	echo

	echo "   -G <hash>[,<hash>] Check if current HEAD is signed by the given key id (hash) and has a valid GPG signature."
	echo "                      You can separate multiple key-id's via comma without space."
	echo "                      key-id (hash) must be the last 8 characters (all uppercase) of the key."
	echo "                      If current HEAD is a tag, the GPG signature of the tag is checked,"
	echo "                      instead of the signature of the current commit."
	echo "                      For this to pass, you will also have to add your trusted"
	echo "                      GPG public keys locally."
	echo "                      Returns:"
	echo "                          Error, if not signed."
	echo "                          Error, if signed with a different key-id."
	echo "                          Warning, if signed, but pubkey is not available."
	echo "                          Warning, if signed, but pubkey is not trusted."
	echo "                          OK, if signed, pubkey is available and trusted."
	echo "                      '-g', and '-G' are mutually exclusive."
	echo

	echo " Version and Help:"
	echo

	echo "   -V                 Show version information"
	echo "   -h                 Show this help screen"

}

# Give some creds
# @output string  The creds.
# @return integer 0
print_version() {
	printf "Name:    %s\n" "${INFO_NAME}"
	printf "Version: %s (%s)\n" "${INFO_VERSION}" "${INFO_DATE}"
	printf "Author:  %s (%s)\n" "${INFO_AUTHOR}" "${INFO_GPGKEY}"
	printf "Github:  %s\n" "${INFO_GITHUB}"
	printf "License: %s\n" "${INFO_LICENSE}"
	return 0
}


#log "succ" ""
#log "warn"
#log "crit"
#log "info"
log() {
	_lvl="${1}"
	_msg="${2}"


	if [ "${_lvl}" = "succ" ]; then
		PROGRAM_EXIT_TEXT="$( merge_text "${PROGRAM_EXIT_TEXT}" "${CLR_SUCC}[SUCCESS]${CLR_RST}  ${_msg}" )"
		PROGRAM_EXIT_CODE="$( merge_exit_codes "${PROGRAM_EXIT_CODE}" "${EXIT_SUCC}" )"
	elif [ "${_lvl}" = "warn" ]; then
		PROGRAM_EXIT_TEXT="$( merge_text "${PROGRAM_EXIT_TEXT}" "${CLR_WARN}[WARNING]${CLR_RST}  ${_msg}" )"
		PROGRAM_EXIT_CODE="$( merge_exit_codes "${PROGRAM_EXIT_CODE}" "${EXIT_WARN}" )"
	elif [ "${_lvl}" = "crit" ]; then
		PROGRAM_EXIT_TEXT="$( merge_text "${PROGRAM_EXIT_TEXT}" "${CLR_CRIT}[CRITICAL]${CLR_RST} ${_msg}" )"
		PROGRAM_EXIT_CODE="$( merge_exit_codes "${PROGRAM_EXIT_CODE}" "${EXIT_CRIT}" )"
	elif [ "${_lvl}" = "unkn" ]; then
		PROGRAM_EXIT_TEXT="$( merge_text "${PROGRAM_EXIT_TEXT}" "${CLR_CRIT}[UNKNOWN]${CLR_RST}  ${_msg}" )"
		PROGRAM_EXIT_CODE="$( merge_exit_codes "${PROGRAM_EXIT_CODE}" "${EXIT_UNKN}" )"
	elif [ "${_lvl}" = "info" ]; then
		if [ "${OUTPUT_VERBOSE}" = "1" ]; then
			PROGRAM_EXIT_TEXT="$( merge_text "${PROGRAM_EXIT_TEXT}" "${CLR_INFO}[INFO]${CLR_RST}     ${_msg}" )"
		fi
	else
		echo "Error, unknown log level: ${_lvl}"
		exit ${EXIT_UNKN}
	fi
}




# Aggregate nagios exit code.
# OK < Warning < Error < Unknown
#
# @param  integer The current exit code.
# @param  integer The new exit code
# @output integer The combined exit code
merge_exit_codes() {
	_curr_exit="$1"
	_next_exit="$2"

	# OK
	if [ "${_curr_exit}" = "0" ]; then
		_curr_exit="${_next_exit}"
	# Warning
	elif [ "${_curr_exit}" = "1" ]; then
		if [ "${_next_exit}" = "0" ]; then
			_curr_exit="1"
		elif [ "${_next_exit}" = "1" ]; then
			_curr_exit="1"
		elif [ "${_next_exit}" = "2" ]; then
			_curr_exit="2"
		elif [ "${_next_exit}" = "3" ]; then # UNKNOWN -> WARNING
			_curr_exit="1"
		fi
	# Error
	elif [ "${_curr_exit}" = "2" ]; then
		_curr_exit="2"
	# Unknown
	elif [ "${_curr_exit}" = "3" ]; then
		if [ "${_next_exit}" = "0" ]; then
			_curr_exit="3"
		elif [ "${_next_exit}" = "1" ]; then
			_curr_exit="1"
		elif [ "${_next_exit}" = "2" ]; then
			_curr_exit="2"
		elif [ "${_next_exit}" = "3" ]; then # UNKNOWN -> WARNING
			_curr_exit="3"
		fi
	fi
	echo "${_curr_exit}"
}


# Merge two texts with a delimiter
#
# @param  string  The current text
# @param  string  The new text
# @param  string  (Optional) The separator
# @output stringr The combined text
merge_text() {
	_curr_text="${1}"
	_next_text="${2}"
	_separator="${3:-}"

	if [ "${_separator}" = "" ]; then
		_separator="\n"
	fi

	if [ "${_curr_text}" = "" ]; then
		_curr_text="${_next_text}"
	else
		_curr_text="${_curr_text}${_separator}${_next_text}"
	fi
	echo "${_curr_text}"
}


# @param
gpg_hash_in_gpg_hash_comma_sep_str() {
	_one_hash="${1}"
	_many_hash="${2}"

	for i in $( echo "${_many_hash}" | sed 's/,/\n/g' ); do
		if [ "${_one_hash}" = "${i}" ]; then
			# Key was found
			return 0
		fi
	done

	# No key was found
	return 1
}

################################################################################
# Helper functions
################################################################################

# Run wrapper to make sure no aliases are used.
#
# @param  string  The command to execute
# @return integer Unix exit code
run() {
	_cmd="${1}"
	sh -c "LANG=C LC_ALL=C ${_cmd}"
}



################################################################################
# Git helper functions
################################################################################

# Check if a given path is a valid git repository.
#
# @param  string  Git repository path
# @return integer Unix exit code
is_git_dir() {
	_path="${1}"

	if [ ! -d "${_path}" ]; then
		return 1
	fi

	if ! run "cd ${_path} && git rev-parse --is-inside-work-tree" > /dev/null 2>&1; then
		return 1
	fi

	return 0
}

# Check if a remote exists
#
# @param  string  Git repository path
# @return integer Unix exit code
has_remote() {
	_path="${1}"

	if ! run "cd ${_path} && git ls-remote --quiet > /dev/null 2>&1"; then
		return 1
	else
		return 0
	fi
}


# Check if repository contains submodules.
# Outputs number of submodules
# Exits failure if no submodules
#
# @param  string  Git repository path
# @output integer Number of submodules
# @return integer Unix exit code
has_submodule() {
	_path="${1}"

	_modules="$( run "cd ${_path} && git submodule | wc -l | sed 's/^[[:space:]]*//g' | sed 's/[[:space:]]*$//g'" )"

	if [ "${_modules}" = "0" ]; then
		echo "0"
		return 1
	else
		echo "${_modules}"
		return 0
	fi
}

# Returns the current branch name of a git repository
# or an empty string if not on a branch.
# Success is determined by the unix exit code.
#
# @param  string  Git repository path
# @output string  Current branch name or empty string
# @return integer Unix exit code
get_current_branch() {
	_path="${1}"

	_branch="$( run "cd ${_path} && git branch --no-color | grep '^*' | sed 's/^*[[:space:]]*//g' | sed 's/^(.*)$/(nobranch)/g'" )"
	if [ "${_branch}" != "(nobranch)" ]; then
		echo "${_branch}"
		return 0
	else
		echo
		return 1
	fi
}

# Returns the current tag name of a git repository
# or an empty string if not on a tag.
# Success is determined by the unix exit code.
#
# @param  string  Git repository path
# @output string  Current tag name or empty string
# @return integer Unix exit code
get_current_tag() {
	_path="${1}"

	_tag="$( run "cd ${_path} && git log --pretty=format:'%d' --abbrev-commit --date=short -1 | grep -Eo 'tag:.*?,' | sed 's/,.*$//g' | sed 's/tag:[[:space:]]*//g'" )"
	if [ "${_tag}" = "" ]; then
		echo
		return 1
	else
		echo "${_tag}"
		return 0
	fi
}

# Returns the current commit hash of a git repository
# or an empty string if no commit exists.
# Success is determined by the unix exit code.
#
# @param  string  Git repository path
# @output string  Current commit hash or empty string
# @return integer Unix exit code
get_current_commit() {
	_path="${1}"

	# In case it fails...
	if ! _commit="$( run "cd ${_path} && git log --raw -1 " )"; then
		echo
		return 1
	else
		_commit="$( echo "${_commit}" | head -1 | grep commit | sed 's/^commit[[:space:]]*//g' )"

		# In case head/grep/sed were unable to extract it...
		if [ "${_commit}" = "" ]; then
			echo
			return 1
		else
			echo "${_commit}"
			return 0
		fi
	fi
}





_gpg_get_HEAD_raw_gpg_info() {
	_path="${1}"

	# If currently on a tag, verify this tag
	if get_current_tag "${_path}" >/dev/null 2>&1; then
		_tag="$( run "cd ${_path} && git tag --contains" )"
		_gpg="$( run "cd ${_path} && git verify-tag --raw ${_tag} 2>&1 || true" )"

	# If not on a tag, get current commit and verify it
	else
		_commit="$( run "cd ${_path} && git log -1 | head -1 | grep commit | sed 's/^commit[[:space:]]*//g'" )"
		_gpg="$( run "cd ${_path} && git verify-commit --raw ${_commit} 2>&1 || true" )"
	fi

	# No output, no gpg info
	if [ "${_gpg}" = "" ]; then
		echo
		return 1
	else
		echo "${_gpg}"
		return 0
	fi
}

gpg_get_HEAD_sign_hash() {
	_path="${1}"


	# Get raw GPG info
	if ! _gpg="$( _gpg_get_HEAD_raw_gpg_info "${_path}" )"; then
		echo
		return 1
	fi

	# Extract signature (valid or invalid)
	# This simply tells if it is signed at all or not
	# If _sig is empty (nothing found by grep), it was not signed.
	_sig="$( echo "${_gpg}" | grep -Ei 'ERRSIG|GOODSIG' | awk '{print $3}' || true )"


	if [ "${_sig}" = "" ]; then
		echo ""
		return 1
	else
		# Remove first 8 characters from signature.
		# Only get the last part
		echo "${_sig}" | sed 's/^........//g'
		return 0
	fi
}
gpg_get_HEAD_sign_mail() {
	_path="${1}"


	# Get raw GPG info
	if ! _gpg="$( _gpg_get_HEAD_raw_gpg_info "${_path}" )"; then
		echo
		return 1
	fi

	# Extract Email of signee
	# This simply tells if the public key of the signee is available.
	# If no email can be extracted, the public key of this commit is missing
	_email="$( echo "${_gpg}" | grep -Eo '<.*@.*>' | sed 's/^<//g' | sed 's/>$//g' || true )"


	if [ "${_email}" = "" ]; then
		echo ""
		return 1
	else
		echo "${_email}"
		return 0
	fi
}
gpg_get_HEAD_sign_name() {
	_path="${1}"


	# Get raw GPG info
	if ! _gpg="$( _gpg_get_HEAD_raw_gpg_info "${_path}" )"; then
		echo
		return 1
	fi

	# Extract Email of signee
	# This simply tells if the public key of the signee is available.
	# If no email can be extracted, the public key of this commit is missing
	_name="$( echo "${_gpg}" | grep -E 'GOODSIG' | awk '{$1="";$2="";$3="";$NF=""; print}' | sed 's/^[[:space:]]*//g' | sed 's/[[:space:]]*$//g' || true )"


	if [ "${_name}" = "" ]; then
		echo ""
		return 1
	else
		echo "${_name}"
		return 0
	fi
}
gpg_get_HEAD_trust_level() {
	_path="${1}"


	# Get raw GPG info
	if ! _gpg="$( _gpg_get_HEAD_raw_gpg_info "${_path}" )"; then
		echo
		return 1
	fi

	# Extract trust level
	_trust="$( echo "${_gpg}" | grep -Eo 'TRUST_.*' | sed 's/TRUST_//g' || true )"


	if [ "${_trust}" = "" ]; then
		echo ""
		return 1
	else
		echo "${_trust}"
		return 0
	fi
}





################################################################################
# Git functions
################################################################################

# Check if your repository is clean.
# You also have to specify whether or not to ignore submodules.
#
# @param  string  Git repository path
# @param  boolean Ignore submodules? (1: Ignore, 0: Don't Ignore)
# @return integer Unix exit code
git_status() {
	_path="${1}"
	_ign_sub="${2}"

	if [ "${_ign_sub}" = "1" ]; then
		_ign_sub="--ignore-submodules"
	else
		_ign_sub=""
	fi

	_output="$( run "cd ${_path} && git status --porcelain ${_ign_sub}" )"
	if [ "${_output}" != "" ]; then
		return 1
	else
		return 0
	fi
}



# If the git repo is on a branch, check if it
# is in sync with the remote branch (no differences).
# You also have to specify whether or not to ignore submodules.
#
# If the git repo is not on a branch return success.
# @param  string  Git repository path
# @param  string  Remote name (usually 'origin')
# @param  boolean Ignore submodules? (1: Ignore, 0: Don't Ignore)
# @return integer Unix exit code
git_branch_is_in_sync_with_remote() {
	_path="${1}"
	_remote="${2}"
	_ign_sub="${3}"

	if [ "${_ign_sub}" = "1" ]; then
		_ign_sub="--ignore-submodules"
	else
		_ign_sub=""
	fi

	if _branch="$( get_current_branch "${_path}" )"; then
		_branch="$( run "cd ${_path} && git branch --no-color | grep '^*' | sed 's/^*[[:space:]]*//g'" )"

		# Try to fetch remote 15 times in case something goes wrong
		for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15; do
			# Break on early success
			set +e
			if run "cd ${_path} && git fetch --no-recurse-submodules --no-tags --quiet > /dev/null 2>&1"; then
				set -e # Re-enable break on error
				break
			fi
		done

		# Try to diff remote 9 times in case something goes wrong
		for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15; do
			set +e
			_diff="$( run "cd ${_path} && git diff ${_ign_sub} ${_remote}/${_branch} 2>/dev/null"; )"
			_exit="$?"
			if [ "${_exit}" = "0" ]; then
				set -e # Re-enable break on error
				break
			fi
		done

		if [ "${_diff}" != "" ];  then
			return 1
		else
			return 0
		fi
	fi

	# Not on a branch? Return success.
	return 0
}




####################################################################################################
####################################################################################################
###
###  M A I N   E N T R Y P O I N T :   A R G U M E N T S
###
####################################################################################################
####################################################################################################


############################################################
# Retrieve arguments
############################################################

while test -n "${1:-}"; do

	case "$1" in

		# ---- 1. Git repository path
		-d)
			# Get next arg in list (Path)
			shift
			GIT_REPOSITORY_PATH="${1}"
			if ! is_git_dir "${GIT_REPOSITORY_PATH}"; then
				echo "Not a valid git directory"
				exit $EXIT_UNKN
			fi
			;;

		# ---- 2. Output options
		-v)
			OUTPUT_VERBOSE=1
			;;
		-n)
			OUTPUT_NAGIOS=1
			# Get project name
			if [ "${2:-}" = "" ]; then
				echo "Error, -lnrequires a name to be specified"
				exit $EXIT_UNKN
			fi
			shift
			OUTPUT_NAGIOS_NAME="${1}"
			;;
		-l)
			OUTPUT_LOGFILE=1

			# Get path name
			if [ "${2:-}" = "" ]; then
				echo "Error, -l requires a logfile path to be specified"
				exit $EXIT_UNKN
			fi
			shift
			OUTPUT_LOGFILE_NAME="${1}"
			;;

		# ---- 3. Check status
		-s)
			if [ "${CHECK_STATUS_WITHOUT_SUB}" = "1" ]; then
				echo "Error, -S and -s are mutually exclusive."
				echo "Only specify one of then."
				exit $EXIT_UNKN
			fi
			CHECK_STATUS_WITH_SUB=1
			;;
		-S)
			if [ "${CHECK_STATUS_WITH_SUB}" = "1" ]; then
				echo "Error, -S and -s are mutually exclusive."
				echo "Only specify one of then."
				exit $EXIT_UNKN
			fi
			CHECK_STATUS_WITHOUT_SUB=1
			;;

		# ---- 4. Check remote
		-r)
			if [ "${CHECK_REMOTE_WITHOUT_SUB}" = "1" ]; then
				echo "Error, -R and -r are mutually exclusive."
				echo "Only specify one of then."
				exit $EXIT_UNKN
			fi
			CHECK_REMOTE_WITH_SUB=1

			# Get remote name
			if [ "${2:-}" = "" ]; then
				echo "Error, -r requires remote name to be specified"
				exit $EXIT_UNKN
			fi
			shift
			CHECK_REMOTE_NAME="${1}"
			;;
		-R)
			if [ "${CHECK_REMOTE_WITH_SUB}" = "1" ]; then
				echo "Error, -R and -r are mutually exclusive."
				echo "Only specify one of then."
				exit $EXIT_UNKN
			fi
			CHECK_REMOTE_WITHOUT_SUB=1

			# Get remote name
			if [ "${2:-}" = "" ]; then
				echo "Error, -R requires remote name to be specified"
				exit $EXIT_UNKN
			fi
			shift
			CHECK_REMOTE_NAME="${1}"
			;;

		# ---- 5. Check branch
		-b)
			if [ "${CHECK_TAG}" = "1" ] || [ "${CHECK_TAG_ANY}" = "1" ] || [ "${CHECK_BRANCH}" = "1" ]; then
				echo "Error, -b, -B, -t and -T are mutually exclusive."
				echo "Only specify one of then."
				exit $EXIT_UNKN
			fi
			CHECK_BRANCH_ANY=1
			;;
		-B)
			if [ "${CHECK_TAG}" = "1" ] || [ "${CHECK_TAG_ANY}" = "1" ] || [ "${CHECK_BRANCH_ANY}" = "1" ]; then
				echo "Error, -b, -B, -t and -T are mutually exclusive."
				echo "Only specify one of then."
				exit $EXIT_UNKN
			fi
			CHECK_BRANCH=1

			if [ "${2:-}" = "" ]; then
				echo "Error, -B requires branch name to be specified"
				exit $EXIT_UNKN
			fi
			shift
			CHECK_BRANCH_NAME="${1}"
			;;

		# ---- 6. Check tag
		-t)
			if [ "${CHECK_BRANCH}" = "1" ] || [ "${CHECK_BRANCH_ANY}" = "1" ] || [ "${CHECK_TAG}" = "1" ]; then
				echo "Error, -b, -B, -t and -T are mutually exclusive."
				echo "Only specify one of then."
				exit $EXIT_UNKN
			fi
			CHECK_TAG_ANY=1
			;;
		-T)
			if [ "${CHECK_BRANCH}" = "1" ] || [ "${CHECK_BRANCH_ANY}" = "1" ] || [ "${CHECK_TAG_ANY}" = "1" ]; then
				echo "Error, -b, -B, -t and -T are mutually exclusive."
				echo "Only specify one of then."
				exit $EXIT_UNKN
			fi
			CHECK_TAG=1

			if [ "${2:-}" = "" ]; then
				echo "Error, -T requires tag name to be specified"
				exit $EXIT_UNKN
			fi
			shift
			CHECK_TAG_NAME="${1}"
			;;

		# ---- 7. Check gpg
		-g)
			if [ "${CHECK_GPG}" = "1" ]; then
				echo "Error, -g and -G are mutually exclusive."
				echo "Only specify one of then."
				exit $EXIT_UNKN
			fi
			CHECK_GPG_ANY=1
			;;
		-G)
			if [ "${CHECK_GPG_ANY}" = "1" ]; then
				echo "Error, -g and -G are mutually exclusive."
				echo "Only specify one of then."
				exit $EXIT_UNKN
			fi
			CHECK_GPG=1

			if [ "${2:-}" = "" ]; then
				echo "Error, -G requires key-id to be specified"
				exit $EXIT_UNKN
			fi
			shift
			CHECK_GPG_KEYS="${1}"
			;;

		# ---- 8. Version/Help
		-V)
			print_version
			exit $EXIT_SUCC
			;;
		-h)
			print_usage
			exit $EXIT_SUCC
			;;

		# ---- 9. Unknown
		*)
			printf "Unknown argument: %s\n" "$1"
			print_usage
			exit $EXIT_UNKN
			;;
	esac
	shift
done


############################################################
# Validate arguments
############################################################


if [ "${GIT_REPOSITORY_PATH}" = "" ]; then
	echo "Error, -d is mandatory"
	exit $EXIT_UNKN
fi

if ! is_git_dir "${GIT_REPOSITORY_PATH}"; then
	echo "Error, Not a git directory: ${GIT_REPOSITORY_PATH}"
	exit $EXIT_UNKN
fi

# Logfile output requires nagios log format
if [ "${OUTPUT_LOGFILE}" = "1" ]; then
	if [ "${OUTPUT_NAGIOS}" != "1" ]; then
		echo "Error, Setting '-l' quires '-n'!"
		exit $EXIT_UNKN
	fi
fi

# Disable colors for nagios output
if [ "${OUTPUT_NAGIOS}" = "1" ]; then
	CLR_SUCC=
	CLR_WARN=
	CLR_CRIT=
	CLR_UNKN=
	CLR_INFO=
	CLR_RST=
fi



####################################################################################################
####################################################################################################
###
###  M A I N   E N T R Y P O I N T :   C H E C K S
###
####################################################################################################
####################################################################################################



############################################################
# Get some information
############################################################

# HEAD
if GIT_BRANCH="$( get_current_branch "${GIT_REPOSITORY_PATH}" )"; then
	GIT_HEAD="on branch '${GIT_BRANCH}'"
elif GIT_TAG="$( get_current_tag "${GIT_REPOSITORY_PATH}" )"; then
	GIT_HEAD="on tag '${GIT_TAG}'"
else
	GIT_HEAD="detached at: $( get_current_commit "${GIT_REPOSITORY_PATH}" )"
fi
# GPG Signed
if GIT_SIGNED="$( gpg_get_HEAD_sign_hash "${GIT_REPOSITORY_PATH}" )"; then
	GIT_SIGNED="signed ${GIT_SIGNED}"
else
	GIT_SIGNED="unsigned"
fi
# Number of submodules
GIT_SUBMODULES="$( has_submodule "${GIT_REPOSITORY_PATH}" || true )"

log "info" "Bin:        $(git --version | head -1)"
log "info" "Path:       ${GIT_REPOSITORY_PATH}"
log "info" "Submodules: ${GIT_SUBMODULES}"
log "info" "HEAD:       ${GIT_HEAD}"
log "info" "GPG:        ${GIT_SIGNED}"





############################################################
# Do the checks
############################################################

##
## 01. Check git status
##
if [ "${CHECK_STATUS_WITH_SUB}" = "1" ]; then
	if git_status "${GIT_REPOSITORY_PATH}" "1"; then # (without submodule)
		log "succ" "Git status: clean"
	else
		log "crit" "Git status: unclean"
	fi
	if [ "${GIT_SUBMODULES}" != "0" ]; then
		if git_status "${GIT_REPOSITORY_PATH}" "0"; then # (including submodule)
			log "succ" "Git status: submodule(s) clean"
		else
			log "crit" "Git status: submodule(s) unclean"
		fi
	fi

elif [ "${CHECK_STATUS_WITHOUT_SUB}" = "1" ]; then
	if git_status "${GIT_REPOSITORY_PATH}" "1"; then # (without submodule)
		log "succ" "Git status: clean"
	else
		log "crit" "Git status: unclean"
	fi
fi


##
## 02. Check git remote diff
##
if [ "${CHECK_REMOTE_WITH_SUB}" = "1" ]; then

	# 0.2.1 Check if there is a remote in the first place
	if ! has_remote "${GIT_REPOSITORY_PATH}"; then
		log "crit" "Git remote: No remote available"
	else
		if git_branch_is_in_sync_with_remote "${GIT_REPOSITORY_PATH}" "${CHECK_REMOTE_NAME}" "1"; then # (without submodule)
			log "succ" "Git remote: equals with '${CHECK_REMOTE_NAME}'"
		else
			log "crit" "Git remote: differs from '${CHECK_REMOTE_NAME}'"
		fi
		if [ "${GIT_SUBMODULES}" != "0" ]; then
			if git_branch_is_in_sync_with_remote "${GIT_REPOSITORY_PATH}" "${CHECK_REMOTE_NAME}" "0"; then # (including submodule)
				log "succ" "Git remote: submodule(s) equals with '${CHECK_REMOTE_NAME}'"
			else
				log "crit" "Git remote: submodule(s) differs from '${CHECK_REMOTE_NAME}'"
			fi
		fi
	fi

elif [ "${CHECK_REMOTE_WITHOUT_SUB}" = "1" ]; then

	# 0.2.1 Check if there is a remote in the first place
	if ! has_remote "${GIT_REPOSITORY_PATH}"; then
		log "crit" "Git remote: No remote available"
	else
		if git_branch_is_in_sync_with_remote "${GIT_REPOSITORY_PATH}" "${CHECK_REMOTE_NAME}" "1"; then # (without submodule)
			log "succ" "Git remote: equals with '${CHECK_REMOTE_NAME}'"
		else
			log "crit" "Git remote: differs from '${CHECK_REMOTE_NAME}'"
		fi
	fi
fi


##
## 03. Check if git is on a branch (any or specific)
##
if [ "${CHECK_BRANCH_ANY}" = "1" ]; then
	if GIT_BRANCH="$( get_current_branch "${GIT_REPOSITORY_PATH}" )"; then
		log "succ" "Git Branch: on branch '${GIT_BRANCH}'"
	else
		log "crit" "Git Branch: not on any branch"
	fi

elif [ "${CHECK_BRANCH}" = "1" ]; then
	if GIT_BRANCH="$( get_current_branch "${GIT_REPOSITORY_PATH}" )"; then
		if [ "${GIT_BRANCH}" = "${CHECK_BRANCH_NAME}" ]; then
			log "succ" "Git Branch: on branch '${GIT_BRANCH}'"
		else
			log "crit" "Git Branch: on branch '${GIT_BRANCH}', but should be on: '${CHECK_BRANCH_NAME}'"
		fi
	else
		log "crit" "Git Branch: not on any branch"
	fi
fi



##
## 04. Check if git is on a tag (any or specific)
##
if [ "${CHECK_TAG_ANY}" = "1" ]; then
	if GIT_TAG="$( get_current_tag "${GIT_REPOSITORY_PATH}" )"; then
		log "succ" "Git Tag:    on tag '${GIT_TAG}'"
	else
		log "crit" "Git Tag:    not on any tag"
	fi

elif [ "${CHECK_TAG}" = "1" ]; then
	if GIT_TAG="$( get_current_tag "${GIT_REPOSITORY_PATH}" )"; then
		if [ "${GIT_TAG}" = "${CHECK_TAG_NAME}" ]; then
			log "succ" "Git Tag:    on tag '${GIT_TAG}'"
		else
			log "crit" "Git Tag:    on tag '${GIT_TAG}', but should be on: '${CHECK_TAG_NAME}'"
		fi
	else
		log "crit" "Git Tag:    not on any tag"
	fi
fi



##
## 05. Check valid GPG signature of current commit
##
if [ "${CHECK_GPG_ANY}" = "1" ]; then

	# Signed
	if sign_hash="$( gpg_get_HEAD_sign_hash "${GIT_REPOSITORY_PATH}" )"; then

		log "succ" "GPG Signed: Yes with key: ${sign_hash}"

		# Has pubkey
		if sign_name="$( gpg_get_HEAD_sign_name "${GIT_REPOSITORY_PATH}" )" && sign_mail="$( gpg_get_HEAD_sign_mail "${GIT_REPOSITORY_PATH}" )"; then
			log "succ" "GPG Pubkey: available"
			log "succ" "GPG Signer: ${sign_name} <${sign_mail}>"

			# Trust Level
			if trust_level="$( gpg_get_HEAD_trust_level "${GIT_REPOSITORY_PATH}" )"; then
				if [ "${trust_level}" = "UNDEFINED" ]; then
					log "warn" "GPG Trust:  Not trusted"
				else
					log "succ" "GPG Trust:  ${trust_level}"
				fi
			else
				log "warn" "GPG Trust:  unable to get trust level"
			fi
		else
			log "warn" "GPG Pubkey: not available"
		fi

	# Unsigned
	else
		log "crit" "GPG Signed: unsigned"

	fi
elif [ "${CHECK_GPG}" = "1" ]; then

	# Signed
	if sign_hash="$( gpg_get_HEAD_sign_hash "${GIT_REPOSITORY_PATH}" )"; then

		if gpg_hash_in_gpg_hash_comma_sep_str "${sign_hash}" "${CHECK_GPG_KEYS}"; then
			log "succ" "GPG Signed: Yes with expected key: ${sign_hash}"

			# Has pubkey
			if sign_name="$( gpg_get_HEAD_sign_name "${GIT_REPOSITORY_PATH}" )" && sign_mail="$( gpg_get_HEAD_sign_mail "${GIT_REPOSITORY_PATH}" )"; then
				log "succ" "GPG Pubkey: available"
				log "succ" "GPG Signer: ${sign_name} <${sign_mail}>"

				# Trust Level
				if trust_level="$( gpg_get_HEAD_trust_level "${GIT_REPOSITORY_PATH}" )"; then
					if [ "${trust_level}" = "UNDEFINED" ]; then
						log "warn" "GPG Trust:  Not trusted"
					else
						log "succ" "GPG Trust:  ${trust_level}"
					fi
				else
					log "warn" "GPG Trust:  unable to get trust level"
				fi
			else
				log "warn" "GPG Pubkey: not available"
			fi
		else
			log "crit" "GPG Signed: Signed with ${sign_hash}, but not in list of valid keys"
		fi

	# Unsigned
	else
		log "crit" "GPG Signed: unsigned"
	fi
fi






##
## 06. Create Nagios output?
##
if [ "${OUTPUT_NAGIOS}" = "1" ]; then

	NAGIOS_STATUS_LINE=
	if [ "${PROGRAM_EXIT_CODE}" = "${EXIT_SUCC}" ]; then
		NAGIOS_STATUS_LINE="[SUCCESS] ${OUTPUT_NAGIOS_NAME} git repo is healthy."
	elif  [ "${PROGRAM_EXIT_CODE}" = "${EXIT_WARN}" ]; then
		NAGIOS_STATUS_LINE="[WARNING] ${OUTPUT_NAGIOS_NAME} git repo has warnings."
	elif  [ "${PROGRAM_EXIT_CODE}" = "${EXIT_CRIT}" ]; then
		NAGIOS_STATUS_LINE="[CRITICAL] ${OUTPUT_NAGIOS_NAME} git repo has errors."
	else
		NAGIOS_STATUS_LINE="[UNKNOWN] ${OUTPUT_NAGIOS_NAME} git repo is unknown."
	fi

	# Prepend Nagios status line
	PROGRAM_EXIT_TEXT="$( merge_text "${NAGIOS_STATUS_LINE}" "${PROGRAM_EXIT_TEXT}" )"
fi


##
## 07. Log to file or output?
##
if [ "${OUTPUT_LOGFILE}" = "1" ]; then
	echo "${PROGRAM_EXIT_TEXT}" > "${OUTPUT_LOGFILE_NAME}"
	echo "${PROGRAM_EXIT_CODE}" >> "${OUTPUT_LOGFILE_NAME}"
	exit "${EXIT_SUCC}"
else
	printf "%s${PROGRAM_EXIT_TEXT}\n" ""
	exit "${PROGRAM_EXIT_CODE}"
fi
